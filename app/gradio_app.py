import torch
import os
import json
import logging
import gradio as gr

# –ü–∞—Ç—á –¥–ª—è weights_only=False
_original_torch_load = torch.load
def _patched_torch_load(*args, **kwargs):
    kwargs['weights_only'] = False
    return _original_torch_load(*args, **kwargs)
torch.load = _patched_torch_load

# –†–∞–∑—Ä–µ—à–∞–µ–º pickle –∑–∞–≥—Ä—É–∑–∫—É YOLO-–º–æ–¥–µ–ª–∏
from shiftlab_ocr.doc2text.yolov5.models.yolo import Model
torch.serialization.add_safe_globals([Model])

from app.services import file_handler, preprocessor, ocr, analyzer

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger("document_pipeline")
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
formatter = logging.Formatter('[%(asctime)s] %(levelname)s: %(message)s')
handler.setFormatter(formatter)
if not logger.handlers:
    logger.addHandler(handler)

# –ü–∞—Ä—Å–∏–Ω–≥ markdown_response –∏ –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
def parse_analysis(result):
    base_md = result.get("base_analysis", {}).get("markdown_response", "")
    detail_md = result.get("detailed_analysis", {}).get("markdown_response", "")

    md_final = ""

    if "```json" in base_md:
        comment, json_part = base_md.split("```json")
        json_text = json_part.split("```")[0].strip()
        base_data = json.loads(json_text)

        md_final += f"### üóíÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:\n\n{comment.strip()}\n\n"
        md_final += "### üìã –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n"
        md_final += (
            f"- **–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:** {base_data.get('document_type', '‚Äî')}\n"
            f"- **–ù–∞–∑–≤–∞–Ω–∏–µ:** {base_data.get('title', '‚Äî')}\n"
            f"- **–ê–≤—Ç–æ—Ä:** {base_data.get('author', '‚Äî')}\n"
            f"- **–î–∞—Ç–∞:** {base_data.get('date', '‚Äî')}\n"
            f"- **–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** {base_data.get('summary', '‚Äî')}\n"
            f"- **–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(base_data.get('keywords', []))}\n"
            f"- **–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:** {base_data.get('full_text', '‚Äî')}\n"
        )
    else:
        md_final += base_md

    md_final += "\n---\n"
    md_final += "### üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n"
    md_final += detail_md

    return md_final

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
def process_document(file):
    if file is None:
        return "**–û—à–∏–±–∫–∞:** –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."

    mime_type = file_handler.get_mime_type(file)

    if mime_type.startswith("image/"):
        file = preprocessor.normalize_image(file)

    extracted_text = ocr.extract_text(file, mime_type)
    if not extracted_text:
        return "**–û—à–∏–±–∫–∞:** –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç."

    result = analyzer.process_document_pipeline(extracted_text)
    formatted_result = parse_analysis(result)

    return formatted_result

# Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π, –ø—Ä–∏–º–µ—Ä–∞–º–∏, –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏ –ø—Ä–µ–ª–æ—É–¥–µ—Ä–æ–º
with gr.Blocks() as demo:
    gr.Markdown("""
    # üìë Doc2Text LLM Service

    –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç (**PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ**).
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–π–º—É—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    """)

    file_input = gr.File(label="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç")
    image_preview = gr.Image(label="üñºÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    output_md = gr.Markdown(label="üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

    submit_button = gr.Button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")

    gr.Examples(
        examples=[
            "examples/e0bfc9da78d759e5174d70d32737d9c0.jpg",
            "examples/snils_-obrazec.jpg",
            "examples/vneshniy-vid-voditelskih-prav.jpg"
        ],
        inputs=file_input,
        label="üñºÔ∏è –ü—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    )

    file_input.change(lambda file: file.name if file else None, inputs=file_input, outputs=image_preview)

    submit_button.click(
        fn=process_document,
        inputs=file_input,
        outputs=output_md,
        api_name="process_document"
    )

    submit_button.click(lambda: gr.update(interactive=False), None, submit_button)
    submit_button.click(lambda: gr.update(interactive=True), None, submit_button, queue=False)

if __name__ == "__main__":
    demo.queue().launch(
        server_name="0.0.0.0",
        server_port=7860,
        show_api=False,
        share=False
    )
